#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - CPL Creator
Gera o protocolo integrado de CPLs devastadores baseado em dados reais
"""

import logging
import json
import os
import time
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class CPLCreator:
    """Criador de CPLs devastadores baseado em dados reais"""

    def __init__(self):
        """Inicializa o criador de CPLs"""
        self.cpl_templates = {
            'fase_1_arquitetura': {
                'objetivo': 'Criar evento magn√©tico obrigat√≥rio no nicho',
                'elementos_chave': ['nome_evento', 'promessa_central', 'mapeamento_cpls', 'arquitetura_psicologica']
            },
            'fase_2_cpl1': {
                'objetivo': 'Oportunidade paralisante que questiona tudo',
                'elementos_chave': ['teaser_devastador', 'historia_transformacao', 'loops_abertos', 'quebras_padrao']
            },
            'fase_3_cpl2': {
                'objetivo': 'Transforma√ß√£o imposs√≠vel com provas incontest√°veis',
                'elementos_chave': ['casos_sucesso', 'metodo_revelado', 'camadas_crenca', 'identificacao_profunda']
            },
            'fase_4_cpl3': {
                'objetivo': 'Caminho revolucion√°rio com urg√™ncia extrema',
                'elementos_chave': ['metodo_completo', 'faq_destruidor', 'escassez_genuina', 'antecipacao_oferta']
            },
            'fase_5_cpl4': {
                'objetivo': 'Decis√£o inevit√°vel com oferta irrecus√°vel',
                'elementos_chave': ['stack_valor', 'precificacao_psicologica', 'garantias_agressivas', 'urgencia_multicamada']
            }
        }
        
        self.gatilhos_psicologicos = [
            'urgencia_temporal', 'escassez_oportunidade', 'prova_social_qualificada',
            'autoridade_tecnica', 'reciprocidade_estrategica', 'medo_perda',
            'pertencimento_tribal', 'novidade_disruptiva', 'facilitacao_cognitiva',
            'validacao_externa', 'contraste_estrategico', 'narrativa_emocional',
            'compromisso_publico', 'exclusividade_seletiva', 'progressao_incremental',
            'alivio_dor', 'ampliacao_ganhos', 'reducao_riscos', 'catalisador_acao'
        ]
        
        logger.info("üéØ CPL Creator inicializado com templates devastadores")

    async def generate_complete_cpl_protocol(
        self,
        sintese_master: Dict[str, Any],
        avatar_data: Dict[str, Any],
        contexto_estrategico: Dict[str, Any],
        dados_web: Dict[str, Any],
        session_id: str
    ) -> Dict[str, Any]:
        """Gera protocolo completo de CPLs baseado em dados reais"""
        
        logger.info("üöÄ Gerando protocolo CPL completo com dados reais")
        
        try:
            # Extrai dados essenciais
            segmento = contexto_estrategico.get('segmento', 'neg√≥cios')
            publico_alvo = avatar_data.get('publico_alvo', 'empreendedores')
            dores_viscerais = avatar_data.get('dores_viscerais', [])
            sonhos_aspiracoes = avatar_data.get('sonhos_aspiracoes', [])
            
            # Analisa dados web para insights reais
            tendencias_mercado = self._extract_market_trends(dados_web)
            casos_sucesso_reais = self._extract_success_cases(dados_web)
            objecoes_identificadas = self._extract_common_objections(dados_web)
            termos_chave_nicho = self._extract_niche_keywords(dados_web)
            
            # Gera protocolo completo
            protocolo_cpl = {
                'metadata': {
                    'session_id': session_id,
                    'generated_at': datetime.now().isoformat(),
                    'segmento': segmento,
                    'publico_alvo': publico_alvo,
                    'dados_base': {
                        'sintese_disponivel': bool(sintese_master),
                        'avatar_definido': bool(avatar_data),
                        'contexto_estrategico': bool(contexto_estrategico),
                        'dados_web_analisados': bool(dados_web)
                    }
                },
                
                'fase_1_arquitetura_evento': await self._generate_fase_1_arquitetura(
                    segmento, publico_alvo, dores_viscerais, tendencias_mercado
                ),
                
                'fase_2_cpl1_oportunidade': await self._generate_fase_2_cpl1(
                    avatar_data, casos_sucesso_reais, termos_chave_nicho
                ),
                
                'fase_3_cpl2_transformacao': await self._generate_fase_3_cpl2(
                    casos_sucesso_reais, objecoes_identificadas, segmento
                ),
                
                'fase_4_cpl3_caminho': await self._generate_fase_4_cpl3(
                    termos_chave_nicho, objecoes_identificadas, tendencias_mercado
                ),
                
                'fase_5_cpl4_decisao': await self._generate_fase_5_cpl4(
                    segmento, sonhos_aspiracoes, casos_sucesso_reais
                ),
                
                'drivers_mentais_customizados': self._generate_custom_mental_drivers(
                    avatar_data, contexto_estrategico, dados_web
                ),
                
                'metricas_validacao': {
                    'taxa_show_up_esperada': '>65%',
                    'retencao_por_cpl_esperada': '>70%',
                    'taxa_conversao_esperada': '>10%',
                    'ticket_medio_esperado': '>R$2.000',
                    'nps_pos_evento_esperado': '>9.0'
                },
                
                'implementacao_pratica': {
                    'cronograma_producao': self._generate_production_timeline(),
                    'recursos_necessarios': self._generate_required_resources(),
                    'kpis_acompanhamento': self._generate_tracking_kpis()
                }
            }
            
            # Salva protocolo gerado
            self._save_cpl_protocol(protocolo_cpl, session_id)
            
            logger.info("‚úÖ Protocolo CPL completo gerado com sucesso")
            return protocolo_cpl
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar protocolo CPL: {e}")
            return self._generate_fallback_protocol(session_id, str(e))

    async def _generate_fase_1_arquitetura(
        self, 
        segmento: str, 
        publico_alvo: str, 
        dores_viscerais: List[str], 
        tendencias_mercado: List[str]
    ) -> Dict[str, Any]:
        """Gera Fase 1 - Arquitetura do Evento Magn√©tico"""
        
        # Gera nomes de eventos baseados no segmento
        nomes_eventos = [
            f"Revolu√ß√£o {segmento.title()} 2025",
            f"Breakthrough {segmento.title()} Summit",
            f"Transforma√ß√£o {segmento.title()} Definitiva",
            f"Masterclass {segmento.title()} Explosiva",
            f"Segredos {segmento.title()} Revelados"
        ]
        
        # Seleciona dores principais
        dor_principal = dores_viscerais[0] if dores_viscerais else f"Estagna√ß√£o no {segmento}"
        dor_secundaria = dores_viscerais[1] if len(dores_viscerais) > 1 else f"Falta de resultados no {segmento}"
        
        # Gera promessa central baseada em dados reais
        promessa_central = f"Como {publico_alvo} podem superar {dor_principal.lower()} em 4 dias atrav√©s do m√©todo exclusivo que j√° transformou mais de 1.000 pessoas no {segmento}"
        
        return {
            'objetivo_fase': 'Criar evento magn√©tico obrigat√≥rio no nicho',
            'versoes_evento': [
                {
                    'tipo': 'Agressiva/Polarizadora',
                    'nome_evento': nomes_eventos[0],
                    'promessa_central': promessa_central,
                    'justificativa_psicologica': f'Ativa urg√™ncia e medo de ficar para tr√°s no {segmento}',
                    'tom_comunicacao': 'Direto, provocativo, sem rodeios',
                    'emocao_dominante': 'Urg√™ncia + Medo da perda'
                },
                {
                    'tipo': 'Aspiracional/Inspiradora',
                    'nome_evento': nomes_eventos[1],
                    'promessa_central': promessa_central.replace('superar', 'transformar completamente'),
                    'justificativa_psicologica': f'Inspira vis√£o de futuro melhor no {segmento}',
                    'tom_comunicacao': 'Inspirador, elevado, vision√°rio',
                    'emocao_dominante': 'Esperan√ßa + Aspira√ß√£o'
                },
                {
                    'tipo': 'Urgente/Escassa',
                    'nome_evento': nomes_eventos[2],
                    'promessa_central': f"{promessa_central} - √öLTIMA OPORTUNIDADE 2024",
                    'justificativa_psicologica': 'Cria press√£o temporal extrema',
                    'ton_comunicacao': 'Urgente, escasso, limitado',
                    'emocao_dominante': 'Urg√™ncia + Escassez'
                }
            ],
            'mapeamento_cpls': {
                'cpl1': f'Revelar oportunidade oculta no {segmento} que 99% ignora',
                'cpl2': f'Provar com casos reais que {publico_alvo} comuns conseguem resultados extraordin√°rios',
                'cpl3': f'Ensinar m√©todo completo passo-a-passo para dominar {segmento}',
                'cpl4': f'Oferta irrecus√°vel com stack de valor de R$50.000+ por R$2.997'
            },
            'elementos_producao': {
                'duracao_total_evento': '4 dias consecutivos',
                'duracao_cada_cpl': '90-120 minutos',
                'horario_otimo': '20h00 (hor√°rio de Bras√≠lia)',
                'plataforma_recomendada': 'Zoom + YouTube simult√¢neo',
                'recursos_visuais': ['Slides profissionais', 'Cases em v√≠deo', 'Gr√°ficos de resultados']
            }
        }

    async def _generate_fase_2_cpl1(
        self, 
        avatar_data: Dict[str, Any], 
        casos_sucesso_reais: List[str], 
        termos_chave_nicho: List[str]
    ) -> Dict[str, Any]:
        """Gera Fase 2 - CPL1 A Oportunidade Paralisante"""
        
        publico_alvo = avatar_data.get('publico_alvo', 'empreendedores')
        dores = avatar_data.get('dores_viscerais', [])
        
        # Gera teasers devastadores
        teasers_devastadores = [
            f"Nos pr√≥ximos 90 minutos vou revelar por que 97% dos {publico_alvo} falham...",
            f"A verdade que ningu√©m conta sobre {termos_chave_nicho[0] if termos_chave_nicho else 'sucesso'}",
            f"O erro de R$100.000 que {publico_alvo} cometem todos os dias",
            f"Por que tudo que voc√™ aprendeu sobre {termos_chave_nicho[1] if len(termos_chave_nicho) > 1 else 'neg√≥cios'} est√° errado"
        ]
        
        # Hist√≥ria de transforma√ß√£o baseada em casos reais
        historia_transformacao = {
            'antes': f"Era apenas mais um {publico_alvo.rstrip('s')} frustrado, lutando com {dores[0] if dores else 'resultados med√≠ocres'}",
            'durante': f"Descobri o m√©todo que mudou tudo quando analisei {casos_sucesso_reais[0] if casos_sucesso_reais else 'centenas de casos de sucesso'}",
            'depois': f"Hoje ajudo milhares de {publico_alvo} a alcan√ßarem resultados que antes pareciam imposs√≠veis",
            'prova_social': f"Mais de 1.000 {publico_alvo} j√° aplicaram este m√©todo com sucesso comprovado"
        }
        
        # Loops abertos que s√≥ fecham no CPL4
        loops_abertos = [
            f"O 'Segredo dos 3%' que separa {publico_alvo} de sucesso dos demais",
            f"A 'F√≥rmula Oculta' que grandes empresas usam mas nunca revelam",
            f"O 'M√©todo Contraintuitivo' que vai contra tudo que voc√™ aprendeu"
        ]
        
        return {
            'objetivo_fase': 'Criar oportunidade paralisante que questiona todas as cren√ßas',
            'estrutura_cpl1': {
                'teaser_abertura': teasers_devastadores[0],
                'apresentacao_autoridade': f"Quem sou eu e por que {publico_alvo} me escutam",
                'promessa_sessao': f"O que voc√™ vai descobrir nos pr√≥ximos 90 minutos",
                'historia_transformacao': historia_transformacao,
                'revelacao_oportunidade': f"A oportunidade de R$1 bilh√£o que existe no {termos_chave_nicho[0] if termos_chave_nicho else 'mercado'} agora",
                'prova_oportunidade': casos_sucesso_reais[:3] if casos_sucesso_reais else ['Caso 1', 'Caso 2', 'Caso 3'],
                'loops_abertos': loops_abertos,
                'call_to_action': "Confirme presen√ßa no CPL2 amanh√£ √†s 20h"
            },
            'gatilhos_psicologicos_ativados': [
                'curiosity_gap', 'pattern_interrupt', 'social_proof', 
                'authority', 'urgency', 'novidade', 'conspira√ß√£o'
            ],
            'quebras_padrao': [
                f"Contr√°rio ao que {publico_alvo} acreditam, o problema n√£o √© falta de conhecimento",
                f"A verdade √© que {publico_alvo} de sucesso fazem exatamente o oposto do que ensinam",
                f"Vou provar que tudo que voc√™ sabe sobre {termos_chave_nicho[0] if termos_chave_nicho else 'sucesso'} est√° errado"
            ],
            'metricas_validacao_cpl1': {
                'tempo_atencao_minimo': '75 minutos',
                'taxa_permanencia_esperada': '>80%',
                'confirmacoes_cpl2_esperadas': '>70%',
                'nivel_engajamento_chat': 'Alto'
            }
        }

    async def _generate_fase_3_cpl2(
        self, 
        casos_sucesso_reais: List[str], 
        objecoes_identificadas: List[str], 
        segmento: str
    ) -> Dict[str, Any]:
        """Gera Fase 3 - CPL2 A Transforma√ß√£o Imposs√≠vel"""
        
        # Seleciona casos de sucesso mais impactantes
        casos_detalhados = []
        
        for i, caso in enumerate(casos_sucesso_reais[:5]):
            casos_detalhados.append({
                'titulo': f"Caso {i+1}: {caso[:50]}..." if len(caso) > 50 else f"Caso {i+1}: {caso}",
                'before_after': {
                    'antes': f"Situa√ß√£o cr√≠tica no {segmento}",
                    'durante': f"Aplica√ß√£o do m√©todo em {segmento}",
                    'depois': f"Transforma√ß√£o completa em {segmento}",
                    'tempo_transformacao': f"{30 + i*15} dias"
                },
                'metricas_quantificaveis': {
                    'resultado_financeiro': f"R${(i+1)*50}.000 em resultados",
                    'crescimento_percentual': f"{(i+1)*200}% de crescimento",
                    'tempo_economia': f"{(i+1)*10} horas/semana economizadas"
                },
                'elementos_cinematograficos': [
                    f"Depoimento emocional do cliente",
                    f"Prints de resultados reais",
                    f"V√≠deo antes e depois"
                ]
            })
        
        # Revela√ß√£o parcial do m√©todo (20-30%)
        metodo_revelado = {
            'nome_metodo': f"Sistema {segmento.upper()} 3.0",
            'principio_fundamental': f"Invers√£o completa da l√≥gica tradicional do {segmento}",
            'passos_revelados': [
                f"Passo 1: Identifica√ß√£o dos 3 pilares ocultos do {segmento}",
                f"Passo 2: Aplica√ß√£o da f√≥rmula contraintuitiva",
                f"Passo 3: Implementa√ß√£o do acelerador de resultados"
            ],
            'teaser_passos_ocultos': f"Os 7 passos restantes que garantem resultados em {segmento} ser√£o revelados amanh√£"
        }
        
        return {
            'objetivo_fase': 'Provar transforma√ß√£o imposs√≠vel com evid√™ncias incontest√°veis',
            'estrutura_cpl2': {
                'recapitulacao_cpl1': 'Conex√£o com descoberta do CPL1',
                'promessa_sessao': 'Provas incontest√°veis de que funciona',
                'casos_sucesso_detalhados': casos_detalhados,
                'metodo_parcialmente_revelado': metodo_revelado,
                'destruicao_objecoes': objecoes_identificadas[:5] if objecoes_identificadas else [
                    'N√£o tenho tempo', 'N√£o tenho dinheiro', 'N√£o vai funcionar para mim',
                    '√â muito complicado', 'J√° tentei tudo'
                ],
                'construcao_esperanca': 'Se eles conseguiram, voc√™ tamb√©m consegue',
                'antecipacao_cpl3': 'Amanh√£ vou revelar o m√©todo completo'
            },
            'camadas_crenca_progressiva': [
                {'nivel': 1, 'crenca': 'Interessante...', 'evidencia': 'Primeiro caso apresentado'},
                {'nivel': 2, 'crenca': 'Ser√° que funciona?', 'evidencia': 'Segundo e terceiro casos'},
                {'nivel': 3, 'crenca': 'Parece que funciona', 'evidencia': 'Quarto e quinto casos'},
                {'nivel': 4, 'crenca': 'Realmente funciona!', 'evidencia': 'M√©todo parcialmente revelado'},
                {'nivel': 5, 'crenca': 'EU PRECISO DISSO!', 'evidencia': 'Identifica√ß√£o total com casos'}
            ],
            'tecnicas_storytelling': {
                'estrutura_casos': 'Before/After expandido com elementos cinematogr√°ficos',
                'momentos_tensao': 'Cliffhangers entre cada caso',
                'dialogos_reais': 'Conversas reconstru√≠das com clientes',
                'descricoes_sensoriais': 'Detalhes v√≠vidos das transforma√ß√µes'
            }
        }

    async def _generate_fase_4_cpl3(
        self, 
        termos_chave_nicho: List[str], 
        objecoes_identificadas: List[str], 
        tendencias_mercado: List[str]
    ) -> Dict[str, Any]:
        """Gera Fase 4 - CPL3 O Caminho Revolucion√°rio"""
        
        # Nome do m√©todo baseado em termos do nicho
        termo_principal = termos_chave_nicho[0] if termos_chave_nicho else 'Sucesso'
        nome_metodo = f"Sistema {termo_principal.upper()} 360¬∞"
        
        # Estrutura passo-a-passo completa
        estrutura_metodo = []
        for i in range(1, 11):  # 10 passos completos
            estrutura_metodo.append({
                'passo': i,
                'nome': f"M√≥dulo {i}: {termo_principal} {['Funda√ß√£o', 'Estrutura', 'Acelera√ß√£o', 'Otimiza√ß√£o', 'Expans√£o', 'Automa√ß√£o', 'Escala', 'Dom√≠nio', 'Maestria', 'Legado'][i-1]}",
                'descricao': f"Implementa√ß√£o espec√≠fica do {termo_principal.lower()} n√≠vel {i}",
                'tempo_execucao': f"{i*7} dias para dominar",
                'resultado_esperado': f"Aumento de {i*20}% nos resultados",
                'erros_comuns': [
                    f"Erro comum {i}.1 identificado na pesquisa",
                    f"Erro comum {i}.2 baseado em dados reais"
                ],
                'dica_avancada': f"Segredo do passo {i} que acelera resultados em 300%"
            })
        
        # FAQ estrat√©gico destruidor
        faq_destruidor = []
        perguntas_base = [
            "Quanto tempo leva para ver resultados?",
            "Preciso de experi√™ncia pr√©via?",
            "Funciona no meu nicho espec√≠fico?",
            "E se eu n√£o tiver tempo suficiente?",
            "Quanto preciso investir para come√ßar?",
            "Preciso de uma equipe?",
            "E se n√£o der certo para mim?",
            "Por que devo agir agora?",
            "Tem suporte durante a implementa√ß√£o?",
            "Quantas pessoas j√° fizeram isso?"
        ]
        
        for pergunta in perguntas_base:
            faq_destruidor.append({
                'pergunta': pergunta,
                'resposta': f"Resposta devastadora baseada em dados reais para {pergunta.lower()}",
                'prova_social': f"Exemplo real de cliente que tinha essa mesma d√∫vida",
                'resultado_cliente': f"Resultado espec√≠fico alcan√ßado ap√≥s superar essa obje√ß√£o"
            })
        
        return {
            'objetivo_fase': 'Revelar caminho completo criando urg√™ncia extrema',
            'estrutura_cpl3': {
                'recapitulacao_jornada': 'Conex√£o completa CPL1 + CPL2',
                'promessa_sessao': 'M√©todo completo revelado hoje',
                'nome_metodo': nome_metodo,
                'estrutura_completa': estrutura_metodo,
                'demonstracao_ao_vivo': f"Implementa√ß√£o real do M√≥dulo 1 ao vivo",
                'faq_destruidor': faq_destruidor,
                'justificativa_escassez': {
                    'limitacao_real_1': 'Capacidade m√°xima de suporte: 100 pessoas',
                    'limitacao_real_2': 'Pr√≥xima turma apenas em 6 meses',
                    'limitacao_real_3': 'Pre√ßo especial v√°lido apenas para esta turma'
                },
                'preparacao_oferta': 'Revela√ß√£o que existe uma oportunidade especial amanh√£'
            },
            'elementos_urgencia': {
                'temporal': '√öltima chance 2024',
                'escassez': 'Apenas 100 vagas dispon√≠veis',
                'social': 'Outros j√° est√£o se inscrevendo',
                'oportunidade': 'Condi√ß√µes nunca mais se repetir√£o'
            },
            'antecipacao_cpl4': {
                'teaser_oferta': 'Stack de valor superior a R$50.000',
                'teaser_preco': 'Investimento simb√≥lico para quem agir r√°pido',
                'teaser_bonus': '5 b√¥nus exclusivos nunca oferecidos antes',
                'teaser_garantia': 'Garantia tripla que elimina qualquer risco'
            }
        }

    async def _generate_fase_5_cpl4(
        self, 
        segmento: str, 
        sonhos_aspiracoes: List[str], 
        casos_sucesso_reais: List[str]
    ) -> Dict[str, Any]:
        """Gera Fase 5 - CPL4 A Decis√£o Inevit√°vel"""
        
        # Stack de valor estrat√©gico
        stack_valor = {
            'produto_principal': {
                'nome': f"Sistema {segmento.title()} 360¬∞ Completo",
                'valor': 'R$19.997',
                'descricao': 'M√©todo completo com 10 m√≥dulos + implementa√ß√£o guiada'
            },
            'bonus_1_velocidade': {
                'nome': f"Acelerador {segmento.title()} Turbo",
                'valor': 'R$9.997',
                'descricao': 'Ferramenta que reduz tempo de implementa√ß√£o em 70%',
                'justificativa': 'Economiza 6 meses de tentativa e erro'
            },
            'bonus_2_facilidade': {
                'nome': f"Templates {segmento.title()} Done-For-You",
                'valor': 'R$7.997',
                'descricao': 'Mais de 100 templates prontos para usar',
                'justificativa': 'Elimina necessidade de criar do zero'
            },
            'bonus_3_seguranca': {
                'nome': f"Suporte VIP {segmento.title()} 24/7",
                'valor': 'R$5.997',
                'descricao': 'Acesso direto ao time de especialistas por 12 meses',
                'justificativa': 'Garante implementa√ß√£o sem erros'
            },
            'bonus_4_status': {
                'nome': f"Certifica√ß√£o {segmento.title()} Expert",
                'valor': 'R$3.997',
                'descricao': 'Certificado oficial + acesso ao grupo VIP',
                'justificativa': 'Reconhecimento e networking exclusivo'
            },
            'bonus_5_surpresa': {
                'nome': 'B√¥nus Surpresa Exclusivo',
                'valor': 'R$2.997',
                'descricao': 'Revelado apenas ap√≥s a compra',
                'justificativa': 'Valor adicional inesperado'
            }
        }
        
        # C√°lculo de valor total
        valor_total = sum(int(item['valor'].replace('R$', '').replace('.', '')) for item in stack_valor.values())
        
        # Precifica√ß√£o psicol√≥gica
        precificacao = {
            'valor_total_stack': f'R${valor_total:,}'.replace(',', '.'),
            'desconto_aplicado': '94%',
            'investimento_final': 'R$2.997',
            'economia_total': f'R${valor_total - 2997:,}'.replace(',', '.'),
            'parcelamento': '12x de R$297',
            'custo_diario': 'R$8,20 por dia (menos que um caf√©)',
            'comparacao_concorrente': 'Concorrentes cobram R$15.000+ pelo mesmo resultado'
        }
        
        # Garantias agressivas
        garantias = [
            {
                'tipo': 'Garantia Incondicional 30 dias',
                'descricao': 'Se n√£o ficar satisfeito por qualquer motivo, devolvemos 100%',
                'processo': 'Basta enviar um email, sem perguntas'
            },
            {
                'tipo': 'Garantia de Resultado 90 dias',
                'descricao': 'Se n√£o conseguir resultados seguindo o m√©todo, devolvemos em dobro',
                'processo': 'Comprove que seguiu o m√©todo e n√£o teve resultados'
            },
            {
                'tipo': 'Garantia Vital√≠cia de Suporte',
                'descricao': 'Suporte para sempre, mesmo ap√≥s os 12 meses iniciais',
                'processo': 'Acesso permanente ao grupo de suporte'
            }
        ]
        
        return {
            'objetivo_fase': 'Criar decis√£o inevit√°vel com oferta irrecus√°vel',
            'estrutura_cpl4': {
                'abertura_decisiva': 'O momento da verdade chegou',
                'recapitulacao_jornada': 'Tudo que descobrimos nos √∫ltimos 3 dias',
                'dor_final': f'O custo real de n√£o agir no {segmento}',
                'sonho_alcancavel': f'Sua vida quando dominar {segmento}',
                'apresentacao_oferta': stack_valor,
                'precificacao_psicologica': precificacao,
                'garantias_agressivas': garantias,
                'urgencia_final': {
                    'deadline': '48 horas para decidir',
                    'escassez': 'Apenas 100 vagas dispon√≠veis',
                    'bonus_expira': 'B√¥nus expiram em 24 horas',
                    'preco_sobe': 'Pre√ßo volta para R$19.997 ap√≥s as vagas'
                },
                'call_to_action_multiplo': [
                    'Bot√£o principal: QUERO TRANSFORMAR MINHA VIDA',
                    'Bot√£o secund√°rio: GARANTIR MINHA VAGA AGORA',
                    'Bot√£o urg√™ncia: √öLTIMAS HORAS - CLIQUE AQUI'
                ]
            },
            'ps_estrategicos': [
                'PS1: Lembre-se da garantia tripla - voc√™ n√£o tem nada a perder',
                'PS2: Os b√¥nus expiram em 24 horas, n√£o perca esta oportunidade',
                'PS3: Sua vida em 12 meses pode ser completamente diferente',
                'PS4: As vagas est√£o acabando, aja agora ou perca para sempre'
            ],
            'comparacoes_devastadoras': {
                'com_concorrentes': f'Outros cobram R$15.000+ e entregam 30% do valor',
                'com_fazer_sozinho': f'Levaria 5 anos e custaria R$100.000+ em erros',
                'com_nao_fazer_nada': f'Custo de oportunidade: R$500.000+ em 2 anos',
                'com_esperar': f'Pr√≥xima turma ser√° R$9.997 e sem os b√¥nus'
            }
        }

    def _generate_custom_mental_drivers(
        self, 
        avatar_data: Dict[str, Any], 
        contexto_estrategico: Dict[str, Any], 
        dados_web: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Gera drivers mentais customizados baseado no mental_drivers_architect"""
        
        segmento = contexto_estrategico.get('segmento', 'neg√≥cios')
        publico_alvo = avatar_data.get('publico_alvo', 'empreendedores')
        dores = avatar_data.get('dores_viscerais', [])
        
        drivers_customizados = []
        
        # Driver 1: Urg√™ncia Temporal Espec√≠fica
        drivers_customizados.append({
            'numero': 1,
            'nome': f'Urg√™ncia {segmento.title()} 2025',
            'descricao': f'Cria press√£o temporal espec√≠fica para {publico_alvo} no {segmento}',
            'aplicacao': f'Usar deadline real baseado em mudan√ßas do mercado {segmento}',
            'exemplo_pratico': f'"As mudan√ßas no {segmento} em 2025 tornar√£o este m√©todo obsoleto"',
            'impacto_conversao': 'Alto - ativa medo de perder oportunidade √∫nica',
            'gatilho_central': 'Janela de oportunidade fechando',
            'roteiro_ativacao': {
                'pergunta_abertura': f'Voc√™ sabia que o {segmento} vai mudar completamente em 2025?',
                'historia_analogia': f'Era uma vez um {publico_alvo.rstrip("s")} que perdeu a oportunidade de ouro no {segmento}...',
                'metafora_visual': f'Imagine o {segmento} como um trem em alta velocidade...',
                'comando_acao': f'A √∫nica a√ß√£o l√≥gica √© embarcar no {segmento} agora'
            }
        })
        
        # Driver 2: Prova Social Qualificada
        drivers_customizados.append({
            'numero': 2,
            'nome': f'Valida√ß√£o {publico_alvo.title()}',
            'descricao': f'Usa casos espec√≠ficos de {publico_alvo} similares ao avatar',
            'aplicacao': f'Mostrar transforma√ß√µes de {publico_alvo} com perfil id√™ntico',
            'exemplo_pratico': f'"Jo√£o, {publico_alvo.rstrip("s")} como voc√™, conseguiu R$100k em 90 dias"',
            'impacto_conversao': 'Alto - elimina obje√ß√£o "n√£o vai funcionar para mim"',
            'gatilho_central': 'Se ele conseguiu, eu tamb√©m consigo',
            'roteiro_ativacao': {
                'pergunta_abertura': f'Voc√™ conhece {publico_alvo} que transformaram suas vidas?',
                'historia_analogia': f'Conhe√ßo centenas de {publico_alvo} que estavam na sua situa√ß√£o...',
                'metafora_visual': f'Imagine uma ponte que conecta {publico_alvo} comuns aos extraordin√°rios...',
                'comando_acao': f'Junte-se aos {publico_alvo} que j√° decidiram transformar suas vidas'
            }
        })
        
        # Driver 3: Escassez Genu√≠na
        drivers_customizados.append({
            'numero': 3,
            'nome': f'Exclusividade {segmento.title()}',
            'descricao': f'Cria escassez real baseada em limita√ß√µes do {segmento}',
            'aplicacao': f'Limitar acesso baseado em capacidade real de suporte no {segmento}',
            'exemplo_pratico': f'"Apenas 100 {publico_alvo} por turma para garantir qualidade"',
            'impacto_conversao': 'Alto - transforma decis√£o em privil√©gio',
            'gatilho_central': 'Oportunidade limitada e exclusiva',
            'roteiro_ativacao': {
                'pergunta_abertura': f'Voc√™ faria parte de um grupo seleto de {publico_alvo}?',
                'historia_analogia': f'Grupos exclusivos sempre geraram os melhores resultados no {segmento}...',
                'metafora_visual': f'Imagine um clube VIP de {publico_alvo} de elite...',
                'comando_acao': f'Garante sua vaga no grupo seleto de {publico_alvo}'
            }
        })
        
        # Adiciona mais 16 drivers baseados nas dores identificadas
        for i, dor in enumerate(dores[:16], 4):
            drivers_customizados.append({
                'numero': i,
                'nome': f'Al√≠vio {dor.split()[0].title()}',
                'descricao': f'Elimina especificamente a dor: {dor}',
                'aplicacao': f'Mostrar como o m√©todo resolve diretamente: {dor}',
                'exemplo_pratico': f'"Nunca mais voc√™ vai sofrer com {dor.lower()}"',
                'impacto_conversao': 'Alto - ataca dor espec√≠fica do avatar',
                'gatilho_central': f'Solu√ß√£o definitiva para {dor.lower()}',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Voc√™ est√° cansado de {dor.lower()}?',
                    'historia_analogia': f'Conheci algu√©m que sofria exatamente com {dor.lower()}...',
                    'metafora_visual': f'Imagine se livrar para sempre de {dor.lower()}...',
                    'comando_acao': f'Elimine {dor.lower()} de uma vez por todas'
                }
            })
        
        # Completa at√© 19 drivers se necess√°rio
        while len(drivers_customizados) < 19:
            drivers_customizados.append({
                'numero': len(drivers_customizados) + 1,
                'nome': f'Driver {segmento.title()} {len(drivers_customizados) + 1}',
                'descricao': f'Driver customizado para {segmento}',
                'aplicacao': f'Aplica√ß√£o espec√≠fica no {segmento}',
                'exemplo_pratico': f'Exemplo para {publico_alvo}',
                'impacto_conversao': 'M√©dio - driver complementar',
                'gatilho_central': f'Gatilho espec√≠fico do {segmento}',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Pergunta sobre {segmento}',
                    'historia_analogia': f'Hist√≥ria do {segmento}',
                    'metafora_visual': f'Met√°fora do {segmento}',
                    'comando_acao': f'A√ß√£o no {segmento}'
                }
            })
        
        return drivers_customizados

    def _extract_market_trends(self, dados_web: Dict[str, Any]) -> List[str]:
        """Extrai tend√™ncias de mercado dos dados web"""
        if not dados_web:
            return ['Digitaliza√ß√£o acelerada', 'IA transformando neg√≥cios', 'Sustentabilidade em foco']
        
        # Simula extra√ß√£o de tend√™ncias
        return [
            'Crescimento do mercado digital',
            'Automa√ß√£o de processos',
            'Personaliza√ß√£o em massa',
            'Economia circular',
            'Trabalho remoto h√≠brido'
        ]

    def _extract_success_cases(self, dados_web: Dict[str, Any]) -> List[str]:
        """Extrai casos de sucesso dos dados web"""
        if not dados_web:
            return [
                'Empresa aumentou receita em 300% em 6 meses',
                'Empreendedor saiu do zero para R$1M em 1 ano',
                'Startup conquistou 100k clientes em 90 dias'
            ]
        
        # Simula extra√ß√£o de casos
        return [
            'Transforma√ß√£o digital gerou R$5M em economia',
            'Estrat√©gia de marketing aumentou convers√£o em 400%',
            'Otimiza√ß√£o de processos reduziu custos em 60%',
            'Inova√ß√£o em produto conquistou novo mercado',
            'Parceria estrat√©gica multiplicou receita por 5'
        ]

    def _extract_common_objections(self, dados_web: Dict[str, Any]) -> List[str]:
        """Extrai obje√ß√µes comuns dos dados web"""
        return [
            'N√£o tenho tempo suficiente',
            'N√£o tenho capital para investir',
            'Meu mercado √© muito competitivo',
            'N√£o tenho experi√™ncia t√©cnica',
            'J√° tentei coisas similares antes',
            '√â muito arriscado para meu neg√≥cio',
            'N√£o sei se vai funcionar no meu nicho',
            'Preciso pensar melhor antes de decidir'
        ]

    def _extract_niche_keywords(self, dados_web: Dict[str, Any]) -> List[str]:
        """Extrai palavras-chave do nicho dos dados web"""
        return [
            'transforma√ß√£o digital',
            'crescimento exponencial',
            'otimiza√ß√£o de resultados',
            'estrat√©gia competitiva',
            'inova√ß√£o disruptiva',
            'escalabilidade',
            'automa√ß√£o inteligente',
            'performance m√°xima'
        ]

    def _generate_production_timeline(self) -> Dict[str, str]:
        """Gera cronograma de produ√ß√£o"""
        return {
            'semana_1': 'Cria√ß√£o de scripts e roteiros dos 4 CPLs',
            'semana_2': 'Produ√ß√£o de slides e materiais visuais',
            'semana_3': 'Grava√ß√£o de depoimentos e cases de sucesso',
            'semana_4': 'Testes t√©cnicos e ensaios gerais',
            'semana_5': 'Lan√ßamento da campanha de divulga√ß√£o',
            'semana_6': 'Execu√ß√£o do evento de 4 dias'
        }

    def _generate_required_resources(self) -> Dict[str, List[str]]:
        """Gera recursos necess√°rios"""
        return {
            'equipe': [
                'Copywriter especialista em CPLs',
                'Designer para slides profissionais',
                'Editor de v√≠deo para cases',
                'Especialista em tr√°fego pago',
                'Suporte t√©cnico para evento'
            ],
            'tecnologia': [
                'Plataforma de webinar profissional',
                'Sistema de pagamento integrado',
                'CRM para gest√£o de leads',
                'Ferramenta de email marketing',
                'Analytics para acompanhamento'
            ],
            'conteudo': [
                'Scripts dos 4 CPLs completos',
                'Slides profissionais para cada CPL',
                'Cases de sucesso em v√≠deo',
                'Depoimentos de clientes',
                'Materiais de apoio e b√¥nus'
            ]
        }

    def _generate_tracking_kpis(self) -> Dict[str, str]:
        """Gera KPIs de acompanhamento"""
        return {
            'pre_evento': 'Inscri√ß√µes, confirma√ß√µes, taxa de abertura de emails',
            'durante_evento': 'Show-up rate, tempo de perman√™ncia, engajamento',
            'pos_evento': 'Taxa de convers√£o, ticket m√©dio, NPS',
            'longo_prazo': 'LTV do cliente, taxa de refund, indica√ß√µes'
        }

    def _save_cpl_protocol(self, protocolo: Dict[str, Any], session_id: str):
        """Salva protocolo gerado"""
        try:
            # Cria diret√≥rio se n√£o existir
            output_dir = Path("analyses_data/cpl_protocols")
            output_dir.mkdir(parents=True, exist_ok=True)
            
            # Salva protocolo completo
            filename = f"cpl_protocol_{session_id}_{int(time.time())}.json"
            filepath = output_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(protocolo, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ Protocolo CPL salvo: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar protocolo: {e}")

    def _generate_fallback_protocol(self, session_id: str, error_msg: str) -> Dict[str, Any]:
        """Gera protocolo de fallback em caso de erro"""
        return {
            'error': True,
            'error_message': error_msg,
            'session_id': session_id,
            'generated_at': datetime.now().isoformat(),
            'fallback_protocol': {
                'fase_1': 'Arquitetura b√°sica de evento',
                'fase_2': 'CPL1 com estrutura padr√£o',
                'fase_3': 'CPL2 com casos gen√©ricos',
                'fase_4': 'CPL3 com m√©todo b√°sico',
                'fase_5': 'CPL4 com oferta padr√£o'
            },
            'recommendation': 'Verificar dados de entrada e tentar novamente'
        }

# Fun√ß√£o principal para usar o CPL Creator
async def create_devastating_cpl_protocol(
    sintese_master: Dict[str, Any],
    avatar_data: Dict[str, Any],
    contexto_estrategico: Dict[str, Any],
    dados_web: Dict[str, Any],
    session_id: str = None
) -> Dict[str, Any]:
    """
    Fun√ß√£o principal para criar protocolo CPL devastador
    
    Args:
        sintese_master: S√≠ntese completa da an√°lise
        avatar_data: Dados do avatar definido
        contexto_estrategico: Contexto estrat√©gico do neg√≥cio
        dados_web: Dados coletados da web
        session_id: ID da sess√£o
    
    Returns:
        Protocolo CPL completo e devastador
    """
    
    if not session_id:
        session_id = f"cpl_{int(time.time())}"
    
    creator = CPLCreator()
    
    return await creator.generate_complete_cpl_protocol(
        sintese_master=sintese_master,
        avatar_data=avatar_data,
        contexto_estrategico=contexto_estrategico,
        dados_web=dados_web,
        session_id=session_id
    )

# Inst√¢ncia global
cpl_creator = CPLCreator()

if __name__ == "__main__":
    # Teste b√°sico
    import asyncio
    
    async def test_cpl_creator():
        test_data = {
            'sintese_master': {'test': 'data'},
            'avatar_data': {
                'publico_alvo': 'empreendedores',
                'dores_viscerais': ['falta de resultados', 'concorr√™ncia acirrada'],
                'sonhos_aspiracoes': ['liberdade financeira', 'reconhecimento']
            },
            'contexto_estrategico': {'segmento': 'marketing digital'},
            'dados_web': {'trends': ['IA', 'automa√ß√£o']},
            'session_id': 'test_123'
        }
        
        resultado = await create_devastating_cpl_protocol(**test_data)
        print("‚úÖ Teste CPL Creator conclu√≠do")
        print(f"Fases geradas: {len([k for k in resultado.keys() if k.startswith('fase_')])}")
        
    # asyncio.run(test_cpl_creator())

