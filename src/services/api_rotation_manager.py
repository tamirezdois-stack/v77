#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - API Rotation Manager
Sistema centralizado de rota√ß√£o de APIs e fallbacks
"""

import os
import logging
import asyncio
import time
from typing import Dict, List, Any, Optional, Callable, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
import json
from pathlib import Path

# Carrega vari√°veis de ambiente
try:
    from .environment_loader import EnvironmentLoader
    env_loader = EnvironmentLoader()
    env_loader.load_environment()
except ImportError:
    # Fallback manual se environment_loader n√£o estiver dispon√≠vel
    env_file = Path(__file__).parent.parent.parent / '.env'
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value

logger = logging.getLogger(__name__)

@dataclass
class APIProvider:
    """Estrutura para provedor de API"""
    name: str
    keys: List[str]
    current_index: int = 0
    failures: int = 0
    last_failure: Optional[datetime] = None
    is_healthy: bool = True
    timeout: int = 30
    max_failures: int = 3
    cooldown_minutes: int = 5

@dataclass
class ServiceConfig:
    """Configura√ß√£o de servi√ßo com fallbacks"""
    name: str
    primary_providers: List[str]
    fallback_providers: List[str]
    current_provider_index: int = 0
    last_rotation: Optional[datetime] = None

class APIRotationManager:
    """Gerenciador centralizado de rota√ß√£o de APIs e fallbacks"""
    
    def __init__(self):
        """Inicializa o gerenciador"""
        self.providers: Dict[str, APIProvider] = {}
        self.services: Dict[str, ServiceConfig] = {}
        self.stats_file = Path("api_rotation_stats.json")
        
        # Carrega configura√ß√µes
        self._load_api_providers()
        self._setup_service_configs()
        self._load_stats()
        
        logger.info(f"üîÑ API Rotation Manager inicializado com {len(self.providers)} provedores")
    
    def _load_api_providers(self):
        """Carrega todos os provedores de API do ambiente"""
        
        # Mapeamento de provedores e suas configura√ß√µes
        provider_configs = {
            'JINA': {'timeout': 20, 'max_failures': 2},
            'EXA': {'timeout': 30, 'max_failures': 3},
            'SERPER': {'timeout': 25, 'max_failures': 3},
            'FIRECRAWL': {'timeout': 45, 'max_failures': 2},
            'OPENROUTER': {'timeout': 60, 'max_failures': 2},
            'GEMINI': {'timeout': 45, 'max_failures': 2},
            'GROQ': {'timeout': 30, 'max_failures': 3},
            'SUPADATA': {'timeout': 35, 'max_failures': 3},
            'GOOGLE': {'timeout': 20, 'max_failures': 3},
            'YOUTUBE': {'timeout': 25, 'max_failures': 3},
            'TAVILY': {'timeout': 30, 'max_failures': 3}
        }
        
        for provider_name, config in provider_configs.items():
            keys = self._get_provider_keys(provider_name)
            if keys:
                self.providers[provider_name] = APIProvider(
                    name=provider_name,
                    keys=keys,
                    timeout=config['timeout'],
                    max_failures=config['max_failures']
                )
                logger.info(f"‚úÖ {provider_name}: {len(keys)} chaves carregadas")
    
    def _get_provider_keys(self, provider: str) -> List[str]:
        """Obt√©m todas as chaves de um provedor"""
        keys = []
        
        # Chave principal
        main_key = os.getenv(f"{provider}_API_KEY")
        if main_key:
            keys.append(main_key)
        
        # Chaves numeradas
        counter = 1
        while True:
            numbered_key = os.getenv(f"{provider}_API_KEY_{counter}")
            if numbered_key:
                keys.append(numbered_key)
                counter += 1
            else:
                break
        
        return keys
    
    def _setup_service_configs(self):
        """Configura os servi√ßos com seus fallbacks"""
        
        # Configura√ß√µes de servi√ßos
        service_configs = {
            'web_scraping': {
                'primary_providers': ['JINA', 'FIRECRAWL'],
                'fallback_providers': ['EXA', 'SERPER', 'GOOGLE']
            },
            'search_engines': {
                'primary_providers': ['JINA', 'EXA'],
                'fallback_providers': ['SERPER', 'GOOGLE', 'TAVILY']
            },
            'ai_models': {
                'primary_providers': ['OPENROUTER'],
                'fallback_providers': ['GEMINI', 'GROQ']
            },
            'social_data': {
                'primary_providers': ['SUPADATA'],
                'fallback_providers': ['YOUTUBE', 'GOOGLE']
            }
        }
        
        for service_name, config in service_configs.items():
            # Filtra apenas provedores que t√™m chaves dispon√≠veis
            available_primary = [p for p in config['primary_providers'] if p in self.providers]
            available_fallback = [p for p in config['fallback_providers'] if p in self.providers]
            
            if available_primary or available_fallback:
                self.services[service_name] = ServiceConfig(
                    name=service_name,
                    primary_providers=available_primary,
                    fallback_providers=available_fallback
                )
                logger.info(f"üîß Servi√ßo {service_name}: {len(available_primary)} prim√°rios, {len(available_fallback)} fallbacks")
    
    def get_api_key(self, provider: str, rotate: bool = True) -> Optional[str]:
        """Obt√©m chave de API com rota√ß√£o autom√°tica"""
        if provider not in self.providers:
            logger.warning(f"‚ö†Ô∏è Provedor {provider} n√£o encontrado")
            return None
        
        provider_obj = self.providers[provider]
        
        # Verifica se o provedor est√° em cooldown
        if not provider_obj.is_healthy and provider_obj.last_failure:
            cooldown_end = provider_obj.last_failure + timedelta(minutes=provider_obj.cooldown_minutes)
            if datetime.now() < cooldown_end:
                logger.warning(f"‚ö†Ô∏è {provider} em cooldown at√© {cooldown_end.strftime('%H:%M:%S')}")
                return None
            else:
                # Sai do cooldown
                provider_obj.is_healthy = True
                provider_obj.failures = 0
                logger.info(f"‚úÖ {provider} saiu do cooldown")
        
        # Obt√©m chave atual
        current_key = provider_obj.keys[provider_obj.current_index]
        
        # Rotaciona para pr√≥xima chave se solicitado
        if rotate and len(provider_obj.keys) > 1:
            provider_obj.current_index = (provider_obj.current_index + 1) % len(provider_obj.keys)
            logger.debug(f"üîÑ {provider}: Rotacionado para chave {provider_obj.current_index + 1}/{len(provider_obj.keys)}")
        
        return current_key
    
    def report_failure(self, provider: str, error: str = ""):
        """Reporta falha de um provedor"""
        if provider not in self.providers:
            return
        
        provider_obj = self.providers[provider]
        provider_obj.failures += 1
        provider_obj.last_failure = datetime.now()
        
        logger.warning(f"‚ö†Ô∏è Falha reportada para {provider}: {error} (Total: {provider_obj.failures})")
        
        # Se excedeu o limite de falhas, marca como n√£o saud√°vel
        if provider_obj.failures >= provider_obj.max_failures:
            provider_obj.is_healthy = False
            logger.error(f"‚ùå {provider} marcado como n√£o saud√°vel ap√≥s {provider_obj.failures} falhas")
        
        self._save_stats()
    
    def report_success(self, provider: str):
        """Reporta sucesso de um provedor"""
        if provider not in self.providers:
            return
        
        provider_obj = self.providers[provider]
        if provider_obj.failures > 0:
            provider_obj.failures = max(0, provider_obj.failures - 1)
            logger.debug(f"‚úÖ Sucesso para {provider}, falhas reduzidas para {provider_obj.failures}")
        
        if not provider_obj.is_healthy and provider_obj.failures == 0:
            provider_obj.is_healthy = True
            logger.info(f"‚úÖ {provider} restaurado para saud√°vel")
    
    def get_service_provider(self, service: str, attempt: int = 0) -> Optional[Tuple[str, str]]:
        """Obt√©m provedor para um servi√ßo com fallback autom√°tico"""
        if service not in self.services:
            logger.warning(f"‚ö†Ô∏è Servi√ßo {service} n√£o configurado")
            return None
        
        service_config = self.services[service]
        all_providers = service_config.primary_providers + service_config.fallback_providers
        
        if attempt >= len(all_providers):
            logger.error(f"‚ùå Todos os provedores falharam para {service}")
            return None
        
        provider_name = all_providers[attempt]
        api_key = self.get_api_key(provider_name)
        
        if api_key:
            provider_type = "primary" if provider_name in service_config.primary_providers else "fallback"
            logger.info(f"üîß {service}: Usando {provider_name} ({provider_type}) - tentativa {attempt + 1}")
            return provider_name, api_key
        else:
            # Tenta pr√≥ximo provedor
            return self.get_service_provider(service, attempt + 1)
    
    async def execute_with_fallback(
        self, 
        service: str, 
        operation: Callable,
        *args, 
        **kwargs
    ) -> Any:
        """Executa opera√ß√£o com fallback autom√°tico entre provedores"""
        
        attempt = 0
        last_error = None
        
        while True:
            provider_info = self.get_service_provider(service, attempt)
            
            if not provider_info:
                logger.error(f"‚ùå Nenhum provedor dispon√≠vel para {service}")
                if last_error:
                    raise last_error
                else:
                    raise Exception(f"Nenhum provedor dispon√≠vel para {service}")
            
            provider_name, api_key = provider_info
            
            try:
                # Adiciona informa√ß√µes do provedor aos kwargs
                kwargs['provider_name'] = provider_name
                kwargs['api_key'] = api_key
                kwargs['timeout'] = self.providers[provider_name].timeout
                
                # Executa opera√ß√£o
                if asyncio.iscoroutinefunction(operation):
                    result = await operation(*args, **kwargs)
                else:
                    result = operation(*args, **kwargs)
                
                # Reporta sucesso
                self.report_success(provider_name)
                return result
                
            except Exception as e:
                last_error = e
                logger.error(f"‚ùå Falha em {provider_name} para {service}: {e}")
                
                # Reporta falha
                self.report_failure(provider_name, str(e))
                
                # Tenta pr√≥ximo provedor
                attempt += 1
                
                # Aguarda um pouco antes da pr√≥xima tentativa
                if attempt < 3:  # S√≥ aguarda se n√£o for a √∫ltima tentativa
                    await asyncio.sleep(1)
    
    def get_provider_status(self) -> Dict[str, Any]:
        """Obt√©m status de todos os provedores"""
        status = {}
        
        for name, provider in self.providers.items():
            status[name] = {
                'healthy': provider.is_healthy,
                'failures': provider.failures,
                'total_keys': len(provider.keys),
                'current_key_index': provider.current_index,
                'last_failure': provider.last_failure.isoformat() if provider.last_failure else None,
                'timeout': provider.timeout
            }
        
        return status
    
    def _load_stats(self):
        """Carrega estat√≠sticas salvas"""
        try:
            if self.stats_file.exists():
                with open(self.stats_file, 'r') as f:
                    stats = json.load(f)
                
                for provider_name, provider_stats in stats.items():
                    if provider_name in self.providers:
                        provider = self.providers[provider_name]
                        provider.failures = provider_stats.get('failures', 0)
                        provider.is_healthy = provider_stats.get('is_healthy', True)
                        
                        if provider_stats.get('last_failure'):
                            provider.last_failure = datetime.fromisoformat(provider_stats['last_failure'])
                
                logger.info("üìä Estat√≠sticas de API carregadas")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao carregar estat√≠sticas: {e}")
    
    def _save_stats(self):
        """Salva estat√≠sticas"""
        try:
            stats = {}
            for name, provider in self.providers.items():
                stats[name] = {
                    'failures': provider.failures,
                    'is_healthy': provider.is_healthy,
                    'last_failure': provider.last_failure.isoformat() if provider.last_failure else None
                }
            
            with open(self.stats_file, 'w') as f:
                json.dump(stats, f, indent=2)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao salvar estat√≠sticas: {e}")

# Inst√¢ncia global
api_rotation_manager = APIRotationManager()